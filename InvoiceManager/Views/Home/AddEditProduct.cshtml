@model InvoiceManager.Models.ViewModels.EditProductViewModel
@{
    ViewBag.Title = Model.Heading;
}

<h2 class="mb-3">@Model.Heading</h2>
<div class="row">
    <div class="col-lg-6">
        @using (Html.BeginForm("AddEditProduct", "Home"))
        {
            @Html.AntiForgeryToken()

            if (Model.Product.Id == 0)
            {
                <p class="alert alert-info mt-4 mb-4">
                    Wszystkie pola są
                    <strong>wymagane</strong>
                </p>
            }

            @Html.HiddenFor(x => x.Product.Id)
            @Html.HiddenFor(x => x.Product.UserId)


            <div class="form-group">
                @Html.LabelFor(x => x.Product.Name)
                @Html.TextBoxFor(x => x.Product.Name,
                new { @class = "form-control", autofocus = "autofocus" })
                @Html.ValidationMessageFor(x => x.Product.Name)
            </div>

            <div class="form-group">
                @Html.LabelFor(x => x.Product.NetPrice)
                @Html.TextBoxFor(x => x.Product.NetPrice,
                new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.Product.NetPrice)
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.Product.VatRate)
                @Html.TextBoxFor(x => x.Product.VatRate,
                new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.Product.VatRate)
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.Product.VatAmount)
                @Html.TextBoxFor(x => x.Product.VatAmount,
                new { @class = "form-control", @readonly = "readonly" })
                @Html.ValidationMessageFor(x => x.Product.VatAmount)
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.Product.GrossPrice)
                @Html.TextBoxFor(x => x.Product.GrossPrice,
                new { @class = "form-control", @readonly = "readonly" })
                @Html.ValidationMessageFor(x => x.Product.GrossPrice)
            </div>

            <button class="btn btn-primary btn-lg mb-5" type="submit">
                Zapisz
            </button>
        }
    </div>
</div>

@section Scripts
{
    <script>
        $.validator.methods.range = function (value, element, param) {
            var globalizedValue = value.replace(".", ",");
            return this.optional(element) || (globalizedValue >= param[0] && globalizedValue <= param[1]);
        }

        $.validator.methods.number = function (value, element) {
            return this.optional(element) || /-?(?:\d+|\d{1,3}(?:[\s\.,]\d{3})+)(?:[\.,]\d+)?$/.test(value);
        }


        function calculate() {
            var netprice = parseFloat($('#Product_NetPrice').val());
            var vatrate = parseFloat($('#Product_VatRate').val());

            var vatamount = netprice * vatrate / 100;
            var grossprice = netprice + vatamount;

            $('#Product_VatAmount').val(vatamount.toFixed(2).toString().replace(".", ","));
            $('#Product_GrossPrice').val(grossprice.toFixed(2).toString().replace(".", ","));
        }

        $(document).ready(function () {

            $('#Product_NetPrice').change(calculate);
            $('#Product_VatRate').change(calculate);
            $(vatamount).change(calculate);
            $(grossprice).change(calculate);

        });
    </script>
}